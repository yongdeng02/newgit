import axios from 'axios'
import { Loading, Message } from 'element-ui' // 这里我是使用elementUI的组件来给提示

let loadingInstance = null // 加载全局的loading

const instance = axios.create({ //创建axios实例，在这里可以设置请求的默认配置
    timeout: 10000, // 设置超时时间10s
    baseURL: process.env.NODE_ENV === 'production' ? '' : 'https://api.apiopen.top' //根据自己配置的反向代理去设置不同环境的baeUrl
})

// 文档中的统一设置post请求头。
// instance.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'

const httpCode = { //这里我简单列出一些常见的http状态码信息，可以自己去调整配置
    400: '(400)请求参数错误',
    401: '(401)权限不足, 请重新登录',
    403: '(403)服务器拒绝本次访问',
    404: '(404)请求资源未找到',
    500: '(500)内部服务器错误',
    501: '(501)服务器不支持该请求中使用的方法',
    502: '(502)网关错误',
    504: '(504)网关超时'
}

/** 添加请求拦截器 **/
instance.interceptors.request.use((config) => {
    /**
     * 在这里：可以根据业务需求可以在发送请求之前做些什么。
     * config.headers['token'] = sessionStorage.getItem('token') || ''
     */
    loadingInstance = Loading.service({ // 发起请求时加载全局loading，请求失败或有响应时会关闭
        spinner: 'fa fa-spinner fa-spin fa-3x fa-fw',
        text: '拼命加载中...'
    })
    return config
}, (error)=> {
    // 对请求错误做些什么
    console.log('请求错误，原因：', error)
    return Promise.reject(error)
})

/** 添加响应拦截器  **/
instance.interceptors.response.use((response)=> {
    loadingInstance.close()
    if (response.data.code === 200) { // 响应结果里的status: 200是我与后台的约定，大家可以根据实际情况去做对应的判断
        return Promise.resolve(response.data)
    } else {
        Message({
            message: response.data.message,
            type: 'error'
        })
        return Promise.reject(response.data.message)
    }
}, (error)=> {
    loadingInstance.close()
    if (error.response) {
        /**
         * 在这里：可以根据业务需求可以在请求失败后做什么。
         * 根据请求失败的http状态码去给用户相应的提示
         */
        const tips = error.response.status in httpCode ? httpCode[error.response.status] : error.response.data.message
        Message({
            message: tips,
            type: 'error'
        })
        return Promise.reject(error)
    } else {
        Message({
            message: '请求失败',
            type: 'error'
        })
        return Promise.reject(new Error('请求失败'))
    }
})

class request {
    /* 统一封装get请求 */
    get =  (url, params, config = {}) => {
        debugger
        return new Promise((resolve, reject) => {
            instance({
                method: 'get',
                url,
                params,
                ...config
            }).then((response) => {
                resolve(response)
            }).catch((error) => {
                reject(error)
            })
        })
    }

    /* 统一封装post请求 */
    post =  (url, data, config = {}) => {
        debugger
        return new Promise((resolve, reject) => {
            instance({
                method: 'post',
                url,
                data,
                ...config
            }).then((response) => {
                resolve(response)
            }).catch((error) => {
                reject(error)
            })
        })
    }
}

const Request = new request()
export default Request
